.widget{ data: { widget_id: @widget.id }}

  .settings
    .pure-g

      .pure-u-12-24
        .container.products
          %h3 Add widget products
          %p.hint
            You can add multiple items that you're planning on selling &mdash; they will be displayed in a dropdown box inside the widget. If you only enter one item, widget will simply show it's title and price (no dropdown). If you leave even this one field blank, the widget will be a donation-like tool with a single field to enter the desired amount.
          
          - @widget.products.each do |product|

            .product.item{ data: { product_id: product.id } }
              %input.title{type: 'text', value: product.title, class: ('error' unless product.errors[:title].blank?)}
              %input.price{type: 'text', value: product.price, class: ('error' unless product.errors[:title].blank?)}
              = image_tag "remove_icon.png", title: 'Remove this product', class: 'remove'
              - unless product.errors.empty?
                .errorMessage
                  - if product.errors[:title].present?
                    Title
                    = product.errors[:title].join(' and ')
                  %br
                  - if product.errors[:price].present?
                    Price
                    = product.errors[:price].join(' and ')
            
          .product.item.new
            %input.title{placeholder: "Product title", type: 'text'}
            %input.price{placeholder: "Price in #{@gateway.default_currency}", type: 'text'}
            = image_tag "add_icon.png", title: 'Add one more product', class: 'add'

      .pure-u-12-24
        .container.fields
          %h3 Add custom fields to the widget
          %p.hint
            If you'd like your customers to leave some additional info, such as their email or delivery address, you need to add respective fields into your widget. Unless you keep at least an email field, people will be able to pay, but you will be unable to identify them. 

          - if @widget.fields
            - @widget.fields.each do |field|
              .field.item
                %input.fieldName{type: 'text', value: field, class: ('error' if @widget.error_for_custom_field(field))}
                %label.required
                  = check_box_tag "field_required", 1, field =~ /\A\*/
                  Field required
                = image_tag "remove_icon.png", title: 'Remove this field', class: 'remove' 
                - if @widget.error_for_custom_field(field)
                  .errorMessage= @widget.errors[:fields][0][field].join(' and ')

          .field.item.new
            %input.fieldName{placeholder: "Field name, e.g. Email or Address", type: 'text'}
            %label.required
              %input.checkbox(type="checkbox" name="field_required")
              Field required
            = image_tag "add_icon.png", title: 'Add one more field', class: 'add'

    .formActions
      %button.small.save Save
      .saveWarning You've made changes to the widget! Don't forget to save them now.
