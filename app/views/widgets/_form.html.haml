.widget{ data: { widget_id: @widget.id }}

  .settings
    .pure-g

      .pure-u-12-24
        .container.products
          %h3= I18n.t("header", scope: "widgets.form.products")
          %p.hint
            = I18n.t("hint", scope: "widgets.form.products", singular: I18n.t("singular", scope: "widgets.form.products"))

          - @widget.products.each do |product|

            .product.item{ data: { product_id: product.id } }
              %input.title{type: 'text', value: product.title, class: ('error' unless product.errors[:title].blank?)}
              %input.price{type: 'number', value: product.price, min: 0.00001, max: 99999999, class: ('error' unless product.errors[:price].blank?)}
              %label
                %input.singular{type: 'checkbox', checked: product.singular?}
                = I18n.t("singular", scope: "widgets.form.products")
              = image_tag "remove_icon.png", title: I18n.t("remove_product", scope: "widgets.form.products"), class: 'remove'
              - unless product.errors.empty?
                .errorMessage
                  - if product.errors[:title].present?
                    .message
                      = I18n.t("title", scope: "widgets.form.products.errors")
                      = product.errors[:title].join(' and ')
                  - if product.errors[:price].present?
                    .message
                      = I18n.t("price", scope: "widgets.form.products.errors")
                      = product.errors[:price].join(' and ')

          .product.item.new
            %input.title{placeholder: I18n.t("product_title", scope: "widgets.form.products"), type: 'text'}
            %input.price{placeholder: "#{@gateway.default_currency}", type: 'number', max: 99999999, min: 0.00001}
            %label
              %input.singular{type: 'checkbox', checked: true}
              Singular
            = image_tag "add_icon.png", title: I18n.t("one_more_product", scope: "widgets.form.products"), class: 'add'
      .pure-u-12-24
        .container.fields
          %h3= I18n.t("header", scope: "widgets.form.fields")
          %p.hint
            = I18n.t("hint", scope: "widgets.form.fields")

          - if @widget.fields && !@widget.fields.empty?
            - @widget.fields.each do |field|
              .field.item
                %input.fieldName{type: 'text', value: field, class: ('error' if @widget.error_for_custom_field(field))}
                %label.required
                  = check_box_tag "field_required", 1, field =~ /\A\*/
                  = I18n.t("required", scope: "widgets.form.fields")
                = image_tag "remove_icon.png", title: I18n.t("remove_field", scope: "widgets.form.fields"), class: 'remove'
                - if @widget.error_for_custom_field(field)
                  .errorMessage= @widget.errors[:fields][0][field].join(' and ')

          .field.item.new
            %input.fieldName{placeholder: I18n.t("field_name", scope: "widgets.form.fields"), type: 'text'}
            %label.required
              %input.checkbox(type="checkbox" name="field_required")
              = I18n.t("required", scope: "widgets.form.fields")
            = image_tag "add_icon.png", title: I18n.t("one_more_field", scope: "widgets.form.fields"), class: 'add'
      .pure-u-12-24
        .container.settings
          %h3= I18n.t("header", scope: "widgets.form.customize")
          %label.required
            = I18n.t("theme", scope: "widgets.form.customize")
          %br/
          =select_tag :theme, options_for_select([[I18n.t("red", scope: "widgets.form.customize"), 'red'], [I18n.t("black", scope: "widgets.form.customize"), 'black'], [I18n.t("gray", scope: "widgets.form.customize"), 'gray']], selected: @widget.theme.humanize)


    .formActions
      %button.small.save= I18n.t("save", scope: "widgets.form.actions")
      %button.small.cancel.disabled(disabled)
        = I18n.t("cancel", scope: "widgets.form.actions")
      .saveWarning= I18n.t("warning", scope: "widgets.form.actions")
