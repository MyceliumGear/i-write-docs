.page.docs

  %h1 #{ link_to "Documentation", "/docs"} / API / Receiving order status change callback

  %p Whenever order status changes Mycelium Gear issues a GET http request to the url specified in the gateway's <i>callback</i> field (if you filled it). That way it makes your site know that the payment either went through or failed for some reason. This http request is also sometimes called a <i>webhook</i>, although we prefer not to use that terminology.

  %p An important information is passed in this http request as url params, here's what a typical callback may look like:

  .code
    GET https://worldsbestshoes.com/payments/callback?order_id=1&amount=1&status=2&address=1NZov2nm6gRCGW6r4q1qHtxXurrWNpPr1q&tid=tid1&data=some+random+data?signature=aa14c26b2ae892a8719b0c2c57f162b967bfbfbdcc38d8883714a0680cf20467

  %p to make more sense of the information in that GET callback request, let us list all the params in a more readable way and explain each one in detail:

  %ul.longText
    %li
      %b order_id
      %p An internal id of the order. This is how you probably will find the corresponding purchase record in your database.
    %li
      %b amount
      %p This is what has been (or was supposed to be) paid
    %li
      %b status
      %p Returns a numerical value which can be either of those:
      %ul
        %li 1 &mdash; unconfirmed; transaction received, but not enough confirmations yet
        %li 2 &mdash; paid in full
        %li 3 &mdash; underpaid; not enough money received
        %li 4 &mdash; overpaid; too much has been received
        %li 5 &mdash; expired; customer didn't pay in time
    %li
      %b address
      %p The address to which a transaction was supposed to be made
    %li
      %b tid
      %p In case the status is 1,2,3 or 4 this will contain a Bitcoin transaction id
    %li
      %b data
      %p This contains any data that was passed previously while #{ link_to "creating the order", "/docs/creating_orders" }. For example, if you passed <span class="code">"hello world"</span> as data in the request that created that order, you will also get the same string back with a callback.
    %li
      %b signature
      %p This is the most important piece of information in terms of security. You have to remember that anyone can make a request to that callback url of yours and basically fool your website into believing that a certain order was paid. In order to avoid that, Mycelium Gear uses signatures to sign a callback request, so that you can verify it came from Mycelium Gear and not somebody else. We'll talk about it in detail below.

  %h2 Callback signature

  %p The problem with a callback signature is that it cannot be the same as the signature you used to sign your own request which created that order. This is because there's always a chance someone might have intercepted your request and now knows that signature &mdash; with it he could then make a fake callback request. Therefore, Mycelium Gear signs its callback request with a double signature. This is a Ruby example of how you would calculate it:

  .code
    require 'openssl'<br/>
    secret = 'a long string of random chars'<br/> 
    h1 = OpenSSL::HMAC.digest('sha256', secret, "1").unpack("H*").first # 1 is order_id<br/>
    h2 = OpenSSL::HMAC.digest('sha256', secret, h1).unpack("H*").first<br/> 

  %p
    In your callback handler you MUST calculate that signature and then make sure it matches
    the signature that was passed to you as a <span class="code">signature</span> in the callback request.
    If it doesn't match, it means one of the two things: you made a mistake while calculating it
    or the callback request is fake. Before you start getting all nervious,
    always consider the first option.

  .nav
    .left= link_to "&#8592; Previous (creating orders)".html_safe, "/docs/creating_orders"
    .right= link_to "Next (checking order status manually) &#8594;".html_safe, "/docs/checking_order_status"
