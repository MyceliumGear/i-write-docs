.page.docs

  %h1 #{ link_to "Documentation", "/docs"} / Overview of the payment processing

  %p This section describes some basic things about payment processing as well as introduces terms that will be used in the following sections. Some things described here are common to all payment processors, whereas others may be not. After reading this section you will have a good general understanding of how Mycelium Gear works and will be able to proceed to the next sections effortlessly.

  %h2 Why do you need a payment processor?

  %p Generally speaking, you need payment processor to handle payments for you &mdash; charge credit cards, for example &mdash; and then report back to your site or online store when a payment is completed. When a user clicks "Pay" on your site, you redirect him to a special payment page on the payment processor website where he can input his credit card information and pay. Upon completion (or cancellation) of the payment, such payment processesor generally lets your site know via a callback (or sometimes they are also called webhooks): it issues an http request to your site and handles it the information about the payment. It is then your site's duty to receive that information and process it.


  %h2 How do payment processor usually work?

  %p For example, suppose you have a website called worldsbestshoes.com that accepts payments with VeryPay.com, a credit cards payment processor. User picked his shoes, added them to the Cart on the site, then clicked "Complete purchase". At this point, you redirect him to the
  .code https://verypay.com/order/08ccaf5cd48628fb69900d7295cd46de5ac97dc3d798816f550a266f3eec01e1
  %p There user sees a form into which he can input his credit card info. He does that and clicks "Pay". As soon as he does that, VeryPay connects to his credit card company API and attempts to charge the card. If the operation was successful, it redirects the user back to your website (or shows him the button which will redirect him there manually) and also issues a callback (webhook) to
  .code POST https://worldsbestshoes.com/payments/callback
  %p where it sends (via POST parameters) all the info about the payment. In the case the payment fails, it lets the customer know and also issues a callback to the same URL at your site, but this time the payment info contains information about the fact that the payment failed.

  %p Your site then receives the payment information and depending on whether it is okay or not, decides what to do. If the payment went through, it marks the order in its own database as paid and then your delivery manager can start packing the shoes. Or it may mark it as "payment failed" in which case you probably want to suggest your customer he tries another credit card.

  %h2 How does Bitcoin payment processing differs?
  %p The described process is almost identical with Bitcoin payments. The only difference is that a customer doesn't need to provide any sensitive information, like a credit card number. Instead, on the payment page, he sees a Bitcoin address (both written and as a QR code) and then can use his wallet to send money to that address. It is then the payment processor's job to detect that the payment was made, notify the merchant's website and redirect the customer back there too. This is exactly what Mycelium Gear does.

  %h2 Handling the money
  %p The important question thus remains: where does the money go when the payment is made? Traditionally, with credit card payment processors, the money went through that payment processor's bank account and only then would they reach the merchant. The problem with that scheme becomes especially obvious with Bitcoin, because if the payment processor is to accept and temporarily store the money on behalf of many different merchants, then it has to be very confident in its ability to protect that money and merchants must be willing to trust such a payment processor. Luckily, with Bitcoin, you can decouple storing of money and payment processing. Using BIP32, Mycelium Gear can generate new address from a BIP32 public key that a merchant provided. That way, the money that are being paid, always go straight into the merchant's wallet, while the payment processor simply watches the blockchain and checks whether that particular address received the bitcoins. Merchants don't have to trust their payment processor and don't risk losing the money that are held on their behalf.

  %p The best way to think of Mycelium Gear thus, is as of the payment notification system, rather than a payment processor. We only watch the blockchain, we don't actually process anyone's money.

  %h2 Terminology
  %p In the next sections we're gonna get to the point and explain how exactly you can integrate payment processing into your website or app. However, before we do that, it'd be a good idea to get familiar with the terms that will be used.

  %ul

    %li <b>Payment processor</b> is a software that integrates into your website and allows you to be notified when a payment is made without your site having to think about all the complicated things. In the case of Bitcoin payment processing, Mycelium Gear allows you to not think about exchange rate conversion, various Bitcoin denominations, generating new bitcoin addresses and watching the blockchain for the payment. Note that sometimes payment processors are also called <i>payment gateways</i>. Those terms are synonymous, however <i>a gateway</i> in our terminology will have a slightly more specific meaning.

    %li A <b>Gateway</b> is an instance that is usually created within Mycelium Gear database that processes all the payments for a particular store. For example, you, as a merchant, may have two online stores. You would then create two gateways in Mycelium Gear admin panel and use each one with a respective website. 

    %li An <b>Order</b> is being created each time your customer decides to pay. An order represents a logical entity that holds such data as amount to be paid, bitcoin address to which the payment will be sent and many other things. Each order is stored in our database and is associated with a particular <i>Gateway</i> and a merchant. An order also has a status that changes, for example, to "paid" when the associated Bitcoin address receives the correct amount.

    %li A <b>Callback</b> is an http request that is issued by the <i>payment processor</i> whenever an <i>order</i> changes its status. For each gateway you may yourself set a URL to which this request is issued. You have to remember to program your site so it can process this request, extract and make use of the necessary info.


  .nav
    .left= link_to "&#8592; Back to the table of contents".html_safe, "/docs"
    .right= link_to "Next (creating a gateway) &#8594;".html_safe, "/docs/creating_gateway"
